1

Описание/Пошаговая инструкция выполнения домашнего задания:
Установить Metamask и запустить Remix;
Реализовать контракт банка нативной валюты по определённому интерфейсу;
https://gist.github.com/gulitsky/07ca969e7a60040117f32b944885c8ab

Развернуть контракт в тестовой сети Sepolia (или любой другой на выбор) и дать ссылку на верифицированный контракт в проводнике блоков.

Было бы полезно, но не обязательно :)
добавить функцию receive/fallback, которая делает то же самое, что и функция deposit;
сохранить в конструкторе адрес аккаунта, развернувшего контракт;
реализовать модификатор onlyOwner, который позволит владельцу контракта, например, снять любую сумму без ограничений;
вынести интерфейс IBank в отдельный файл и импортировать его в файле с контрактом.

https://sepolia.etherscan.io/address/0x595ee3e1b41337Ea4137261c86bc8B1B3245D813

===================================================================================
2

Создайте свой токен ERC20, используя Remix IDE и Solidity. Опубликуйте этот контракт на тестовой сети Ethereum.
Напишите контракт для создания NFT в соответствии со стандартом ERC-721. Опционально, вы можете создать и свой токен по стандарту ERC-1155.
Изучите уязвимости в контрактах токенов. Для более глубокого понимания, попытайтесь идентифицировать и исправить потенциальные уязвимости в своих собственных контрактах токенов.
Ожидаемое время выполнения: около 10-12 часов.

ERC20
https://sepolia.etherscan.io/address/0x1f58371b84bc128af01b2aefcd760a8b8ff53847

ERC721
https://sepolia.etherscan.io/address/0xF198C9ba1D95F8aA61e0A2bA9EB6b97f55189550

===================================================================================
3

Tests

sepolia
customShop: 0x2A4a0ca372692305Da9108C9C9D1A6B96f10fB19
customToken: 0x45F51A8543da063cc0534630D576Bb989Be17dA9

===================================================================================
4

Создайте контракт с уровнями доступа.
Внедрите мета-транзакции в контракт.
Реализуйте функцию permit в ERC20 токене по стандарту ERC2612.
Создайте обновляемый контракт, используя один из стандартов Transparent, UUPS либо Beacon.
Напишите Factory контракт, который создаёт клонированные контракты. 


Компетенции:
Работа с OpenZeppelin и управление обновлениями
- Умеет управлять системами контроля доступа, владения и ролей, создание и использование мультиподписных кошельков
- Умеет использовать мета-транзакций при разработке на Solidity
- Умеет применять стандарты ERC2612 (ERC20 Permit) для выполнения транзакций от имени других адресов
- Знает основы использования стандарта EIP-4337 для работы с абстрагированными аккаунтами в Ethereum, включая подпись сообщений и выполнение транзакций без прямого владения ETH.
- Умеет применять различные типы обновляемых контрактов в разработке на Solidity, включая прозрачные контракты, UUPS и Beacon контракты, и принимать обоснованные решения об их использовании на основе их преимуществ и недостатков.
- Умеет применять Factory контракты для создания новых контрактов, Clone контракты для создания копий существующих контрактов и операции create и create2 на Solidity

===================================================================================


===================================================================================



===================================================================================